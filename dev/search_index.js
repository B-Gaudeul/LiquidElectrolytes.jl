var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"#Data-of-Electrolyte","page":"Home","title":"Data of Electrolyte","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ElectrolyteData\nAbstractElectrolyteData\nCdl0(::ElectrolyteData)\nldebye(::ElectrolyteData)\nchemical_potentials!\nrrate","category":"page"},{"location":"#LiquidElectrolytes.ElectrolyteData","page":"Home","title":"LiquidElectrolytes.ElectrolyteData","text":"mutable struct ElectrolyteData <: AbstractElectrolyteData\n\nData for electrolyte.\n\nnc::Int64\nNumber of ionic species. Default: 2\niϕ::Int64\nPotential index in species list. Default: nc + 1\nip::Int64\nPressure index in species list Default: nc + 2\nT::Float64\nTemperature Default: (273.15 + 25) * K\nD::Vector{Float64}\nMobility coefficient Default: fill((2.0e-9 * m ^ 2) / s, nc)\nM0::Float64\nMolar weight of solvent Default: (18.0153g) / mol\nM::Vector{Float64}\nMolar weight of ions Default: fill(M0, nc)\nz::Vector{Int64}\nCharge numbers of ions Default: [(-1) ^ (i - 1) for i = 1:nc]\nZ::Vector{Float64}\nCharge numbers scaled by F/RT Default: (z .* F) / (R * T)\nc_bulk::Vector{Float64}\nBulk ion concentrations Default: fill((0.1mol) / dm ^ 3, nc)\nϕ_bulk::Float64\nBulk voltage Default: 0.0\np_bulk::Float64\nBulk pressure Default: 0.0\nΓ_bulk::Int64\nBulk boundary number Default: 1\nv0::Float64\nMolar volume of solvent Default: 1 / ((55.4mol) / dm ^ 3)\nκ::Vector{Float64}\nSolvation numbers Default: fill(0, nc)\nv::Vector{Float64}\nMolar volumes of ions Default: fill(v0, nc)\nε::Float64\nDielectric permittivity of solvent Default: 78.49\npscale::Float64\nPressure scaling factor Default: 1.0e9\nneutralflag::Bool\nElectroneutrality switch Default: false\nscheme::Symbol\nElectroneutrality switch Default: :μex\nlogreg::Float64\nLogarithm regularization Default: 1.0e-18\n\n\n\n\n\n","category":"type"},{"location":"#LiquidElectrolytes.AbstractElectrolyteData","page":"Home","title":"LiquidElectrolytes.AbstractElectrolyteData","text":"abstract type AbstractElectrolyteData\n\nAbstract super type for electrolytes\n\n\n\n\n\n","category":"type"},{"location":"#LiquidElectrolytes.Cdl0-Tuple{ElectrolyteData}","page":"Home","title":"LiquidElectrolytes.Cdl0","text":"Cdl0(electrolyte)\n\nDouble layer capacitance at zero voltage for symmetric binary electrolyte.\n\nExample\n\n@siunits mol dm μF cm\nely=ElectrolyteData(c_bulk=fill(0.01*mol/dm^3,2))\nround(Cdl0(ely),digits=4)/(μF/cm^2)\n# output\n\n22.85\n\n\n\n\n\n","category":"method"},{"location":"#LiquidElectrolytes.ldebye-Tuple{ElectrolyteData}","page":"Home","title":"LiquidElectrolytes.ldebye","text":"ldebye(electrolyte)\n\nDebye length.\n\n\n\n\n\n","category":"method"},{"location":"#LiquidElectrolytes.chemical_potentials!","page":"Home","title":"LiquidElectrolytes.chemical_potentials!","text":"chemical_potentials!(μ,u,electrolyte::AbstractElectrolyteData)\n\nCalculate chemical potentials from concentrations.\n\nInput:\n\nμ: mutated, allocated memory for result\nu: concentrations\n\nReturns μ0, μ: chemical potential of solvent and chemical potentials of ions.\n\n\n\n\n\n","category":"function"},{"location":"#LiquidElectrolytes.rrate","page":"Home","title":"LiquidElectrolytes.rrate","text":"rrate(R0,β,A)\n\nThermodynamic reaction rate expression\n\nrrate(R0,β,A)=R0*(exp(-β*A) - exp((1-β)*A))\n\n\n\n\n\n","category":"function"},{"location":"#Internal-API","page":"Home","title":"Internal API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LiquidElectrolytes.charge\nLiquidElectrolytes.vrel\nLiquidElectrolytes.c0_barc\nLiquidElectrolytes.rlog\nLiquidElectrolytes.wnorm","category":"page"},{"location":"#LiquidElectrolytes.charge","page":"Home","title":"LiquidElectrolytes.charge","text":"charge(c,electrolyte)\n\nCalculate charge from vector of concentrations\n\n\n\n\n\n","category":"function"},{"location":"#LiquidElectrolytes.vrel","page":"Home","title":"LiquidElectrolytes.vrel","text":"vrel(ic,electrolyte)\n\nv_irel=κ_i+fracv_iv_0\n\n\n\n\n\n","category":"function"},{"location":"#LiquidElectrolytes.c0_barc","page":"Home","title":"LiquidElectrolytes.c0_barc","text":"c0_barc(u,electrolyte)\n\nCalculate solvent concentration c_0 and summary concentration bar c from vector of concentrations c using the incompressibility constraint (assuming κ_0=0):\n\n sum_i=0^N c_i (v_i + κ_iv_0) =1\n\nThis gives\n\n c_0v_0=1-sum_i=1^N c_i (v_i+ κ_iv_0)\n\nc_0= 1v_0 - sum_i=1^N c_i(fracv_iv_0+κ)\n\nThen we can calculate \n\n bar c= sum_i=0^N c_i\n\n\n\n\n\n","category":"function"},{"location":"#LiquidElectrolytes.rlog","page":"Home","title":"LiquidElectrolytes.rlog","text":"rlog(u, electrolyte)\n\nRegularized logarithm:\n\n   rlog(u,electrolyte)= log(u+electrolyte.logreg)\n\n\n\n\n\n","category":"function"},{"location":"#LiquidElectrolytes.wnorm","page":"Home","title":"LiquidElectrolytes.wnorm","text":"wnorm(u,w,p)\n\nWeighted norm with respect to columns\n\n\n\n\n\n","category":"function"},{"location":"#Physical-unit-handling","page":"Home","title":"Physical unit handling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Physical unit handling is based on Unitful.jl and PhysicalContstants.jl, prospectively this will be factorized out into another package. The rationale of these macros is the fact that Unitful.jl facilitates working with strongly typed values. Slightly counterintuitively to me, units with different prefixes are different types. Moreover parts of the Julia infrastructure is not (yet) written in Julia, prominently so sparse matrix solvers, and these are not able to handle units.","category":"page"},{"location":"","page":"Home","title":"Home","text":"So we (mis)use the unit packages as databases and allow to retrive numerical values in SI base units","category":"page"},{"location":"","page":"Home","title":"Home","text":"@si_str\n@siunits\n@phconstants","category":"page"}]
}
